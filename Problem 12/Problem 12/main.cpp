#include <iostream>
#include <cmath>

// TASK: The sequence of triangle numbers is generated by adding the natural
//		 numbers.  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6
//		 + 7 = 28.  The 7th triangle number has 6 divisors: 1, 2, 4, 7, 14, 28.
//
//		 Find the value of the first triangle number that has over five hundred
//		 divisors.

int findTriangleNumberWithOverNDivisors(int numDivisorsToFind);
int findNumDivisors(int number);

int main()
{
	const int numDivisorsToFind{500};
	std::cout << findTriangleNumberWithOverNDivisors(numDivisorsToFind) << std::endl;

	return 0;
}

int findTriangleNumberWithOverNDivisors(int numDivisorsToFind)
{
	int triangleIndex{0};
	int targetValue{0};
	// Target number cannot be lower than the number of divisors desired.  Builds
	// target value up to the minimum triangle number value above numDivisorsToFind.
	while (targetValue < numDivisorsToFind)
	{
		++triangleIndex;
		targetValue += triangleIndex;
	}
	while (findNumDivisors(targetValue) <= numDivisorsToFind)
	{
		++triangleIndex;
		targetValue += triangleIndex;
	}
	return targetValue;
}

int findNumDivisors(int number)
{
	int numDivisors{0};
	for (int i{1}; i <= std::sqrt(number); ++i)
	{
		if (number % i == 0)
		{
			// Checking divisors up to root, divisors come in pairs, thus +=2.
			numDivisors += 2;
		}
	}
	return numDivisors;
}
